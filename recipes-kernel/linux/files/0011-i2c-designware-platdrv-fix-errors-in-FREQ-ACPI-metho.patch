From de4b1161235629173b8aa7dab92f2854ce03d6c4 Mon Sep 17 00:00:00 2001
From: Dan O'Donovan <dan@emutex.com>
Date: Fri, 29 Jan 2016 12:51:30 +0000
Subject: [PATCH 11/23] i2c: designware-platdrv: fix errors in 'FREQ' ACPI
 method handling

Incorrect mechanism was used to retrieve value from FREQ ACPI.
Also, moved sanity check on clk_freq value to cover all code
paths that may set this value.

Signed-off-by: Dan O'Donovan <dan@emutex.com>
---
 drivers/i2c/busses/i2c-designware-platdrv.c | 31 +++++++++++------------------
 1 file changed, 12 insertions(+), 19 deletions(-)

diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index e0d508e..95282c1 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -92,21 +92,15 @@ static void dw_i2c_acpi_params(struct platform_device *pdev, char method[],
 
 static void dw_i2c_acpi_freq_param(struct platform_device *pdev, u32 *freq)
 {
-	struct acpi_buffer buf = { ACPI_ALLOCATE_BUFFER };
 	acpi_handle handle = ACPI_HANDLE(&pdev->dev);
-	union acpi_object *obj;
+	unsigned long long tmp;
 
-	if (ACPI_FAILURE(acpi_evaluate_object(handle, "FREQ", NULL, &buf)))
+	if (ACPI_FAILURE(acpi_evaluate_integer(handle, "FREQ", NULL, &tmp)))
 		return;
 
-	obj = (union acpi_object *)buf.pointer;
-	if (obj->type == ACPI_TYPE_PACKAGE && obj->package.count == 1) {
-		const union acpi_object *objs = obj->package.elements;
-
-		*freq = (u32)objs[0].integer.value;
-	}
-
-	kfree(buf.pointer);
+	*freq = (u32)tmp;
+	dev_dbg(&pdev->dev, "%u Hz bus speed specified by 'FREQ' ACPI method\n",
+		*freq);
 }
 
 static int dw_i2c_acpi_configure(struct platform_device *pdev, u32 *freq)
@@ -134,6 +128,7 @@ static int dw_i2c_acpi_configure(struct platform_device *pdev, u32 *freq)
 	dw_i2c_acpi_params(pdev, "SSCN", &dev->ss_hcnt, &dev->ss_lcnt, NULL);
 	dw_i2c_acpi_params(pdev, "FMCN", &dev->fs_hcnt, &dev->fs_lcnt,
 			   &dev->sda_hold_time);
+
 	/* Try to get default speed mode from an ACPI method if it exists */
 	dw_i2c_acpi_freq_param(pdev, freq);
 
@@ -206,20 +201,18 @@ static int dw_i2c_plat_probe(struct platform_device *pdev)
 
 		of_property_read_u32(pdev->dev.of_node, "clock-frequency",
 				     &clk_freq);
-
-		/* Only standard mode at 100kHz and fast mode at 400kHz
-		 * are supported.
-		 */
-		if (clk_freq != 100000 && clk_freq != 400000) {
-			dev_err(&pdev->dev, "Only 100kHz and 400kHz supported");
-			return -EINVAL;
-		}
 	} else {
 		pdata = dev_get_platdata(&pdev->dev);
 		if (pdata)
 			clk_freq = pdata->i2c_scl_freq;
 	}
 
+	/* Only standard mode at 100kHz and fast mode at 400kHz are supported */
+	if (clk_freq != 100000 && clk_freq != 400000) {
+		dev_err(&pdev->dev, "Only 100kHz and 400kHz supported");
+		return -EINVAL;
+	}
+
 	r = i2c_dw_eval_lock_support(dev);
 	if (r)
 		return r;
-- 
2.8.0

