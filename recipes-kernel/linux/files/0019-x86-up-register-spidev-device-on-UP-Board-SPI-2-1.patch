From 4909d8f711b6c8d6ccd2f02a499374ee6ac21c45 Mon Sep 17 00:00:00 2001
From: Dan O'Donovan <dan@emutex.com>
Date: Wed, 16 Mar 2016 17:50:12 +0000
Subject: [PATCH 19/23] x86/up: register spidev device on UP Board SPI 2-1

Register a spidev device on UP Board SPI bus #2 chip-select 1 to
allow user-space applications to access to SPI devices connected
on the external I/O pin header.

Note that this is a gpio-based chip-select, and registering this
device effectively causes the gpio pin to be reserved by the SPI
driver.  Adding 'up_board.spidev1=0' to the kernel command line
will prevent this device from being registered.

Signed-off-by: Dan O'Donovan <dan@emutex.com>
---
 drivers/platform/x86/up_board.c | 18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/drivers/platform/x86/up_board.c b/drivers/platform/x86/up_board.c
index 221e9dd..c93034e 100644
--- a/drivers/platform/x86/up_board.c
+++ b/drivers/platform/x86/up_board.c
@@ -44,6 +44,10 @@ static bool spidev0 = true;
 module_param(spidev0, bool, S_IRUGO);
 MODULE_PARM_DESC(spidev0, "register a spidev device on SPI bus 2-0");
 
+static bool spidev1 = true;
+module_param(spidev1, bool, S_IRUGO);
+MODULE_PARM_DESC(spidev1, "register a spidev device on SPI bus 2-1");
+
 /* On the UP board, if the ODEn bit is set on the pad configuration
  * it seems to impair some functions on the I/O header such as UART, SPI
  * and even I2C.  So we disable it for all header pins by default.
@@ -183,10 +187,9 @@ static struct regulator_consumer_supply vref3v3_consumers[] = {
 	REGULATOR_SUPPLY("vref", "2-0054"),
 };
 
-static struct spi_board_info up_spidev0_info __initdata = {
+static struct spi_board_info up_spidev_info __initdata = {
 	.modalias	= "spidev",
 	.bus_num	= UP_BOARD_SPIDEV_BUS_NUM,
-	.chip_select	= 0,
 	.max_speed_hz   = UP_BOARD_SPIDEV_MAX_CLK,
 };
 
@@ -317,12 +320,21 @@ up_board_init_devices(void) {
 
 	/* Register devices common to all board versions */
 	if (spidev0) {
-		ret = spi_register_board_info(&up_spidev0_info, 1);
+		up_spidev_info.chip_select = 0;
+		ret = spi_register_board_info(&up_spidev_info, 1);
 		if (ret) {
 			pr_err("Failed to register UP Board spidev0 device");
 			return -ENODEV;
 		}
 	}
+	if (spidev1) {
+		up_spidev_info.chip_select = 1;
+		ret = spi_register_board_info(&up_spidev_info, 1);
+		if (ret) {
+			pr_err("Failed to register UP Board spidev1 device");
+			return -ENODEV;
+		}
+	}
 
 	/* Create a virtual device to manage the UP Board GPIO pin header */
 	up_pinctrl_dev = platform_device_alloc("up-pinctrl", -1);
-- 
2.8.0

